{"componentChunkName":"component---src-templates-resource-single-js","path":"/resources/service-mesh/istio-authorization-policy.html","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Istio Authorization Policy\",\n  \"thumbnail\": \"../../../../assets/images/service-mesh-icons/istio.svg\",\n  \"darkthumbnail\": \"../../../../assets/images/service-mesh-icons/istio.svg\",\n  \"date\": \"2022-06-01 10:30:05 -0530\",\n  \"type\": \"Article\",\n  \"category\": \"Service Mesh\",\n  \"mesh\": \"Istio\",\n  \"technology\": \"Docker\",\n  \"tags\": [\"Istio\"],\n  \"featured\": false,\n  \"published\": true,\n  \"resource\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(ResourcesWrapper, {\n    mdxType: \"ResourcesWrapper\"\n  }, mdx(\"div\", {\n    className: \"intro\"\n  }, mdx(\"p\", null, \"Istio is a massive project with a wide range of capabilities and deployment options. We will learn about the Istio\\u2019s authorization policy with an example .\")), mdx(\"p\", null, mdx(\"h2\", null, \"Let\\u2019s see Istio\\u2019s Security Architecture \")), mdx(\"p\", null, \"Before we directly jump into Istio's Authorization policies let's have a glance at Istio's Security architecture. The below diagram is directly referenced from Istio documentation. From the control plane, users can create things like authorization policies authentication policies, and policies will get translated into envoy config and streamed bent the varied proxies that form up the service mesh, on the information plane side there is east-west traffic from service b to c and also the actual communication takes place through sidecar proxies. If the traffic is entering it moves to the Ingress gateway and if it\\u2019s leaving it can attend the Egress gateway in between all this we will apply JWT enforcements.\"), mdx(\"p\", null, mdx(\"img\", {\n    src: istiosecurityarch,\n    align: \"center\",\n    alt: \"comparative spectrum\"\n  })), mdx(\"h2\", null, \" Istio includes a high-level architecture that involves multiple factors such as:\"), mdx(\"p\", null, mdx(\"ul\", null, mdx(\"li\", null, \"  Certificate Authority for key and certificate management \"), mdx(\"li\", null, \" Sidecar and perimeter proxies work as Policy Enforcement Points to secure communication between the clients and servers. \"), mdx(\"li\", null, \" A set of Envoy proxy extensions is there to manage telemetry and auditing \"))), mdx(\"h2\", null, \" Istio\\u2019s Authorization policies\"), mdx(\"p\", null, mdx(\"ul\", null, mdx(\"li\", null, \"  Workload-to-workload and end-user-to-workload authorization. \"), mdx(\"li\", null, \" A Simple API includes one single Authorization Policy, which is easy to use and maintain.\"), mdx(\"li\", null, \"Flexible semantics: operators can define custom conditions on Istio attributes, and use DENY and permit actions. \"), mdx(\"li\", null, \"  High performance: Istio authorization gets enforced natively on the Envoy. \"), mdx(\"li\", null, \" High compatibility: supports gRPC, HTTP, HTTPS, and HTTP2 natively, additionaly as well as any plain TCP protocols. \"))), mdx(\"h2\", null, \"Example Authorization Policy\"), mdx(\"p\", null, \"In this example, we allow access to our service httpbin in namespace foo from any JWT (regardless of the principle) to use the GET method.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"apiVersion: \\\"security.istio.io/v1beta1\\\"\\nkind: \\\"AuthorizationPolicy\\\"\\nmetadata:\\n  name: \\\"allow-reads\\\"\\n  namespace: foo\\nspec:\\n  selector:\\n    matchLabels:\\n      app: httpbin\\n  rules:\\n  - from:\\n    - source:\\n        principals: [\\\"*\\\"]\\n    to:\\n    - operation:\\n        methods: [\\\"GET\\\"]\\n\\n\")), mdx(\"h2\", null, \"Access Flow with Auth Policies\"), mdx(\"p\", null, \"There is some logic behind how authorization is set given defined AuthorizationPolicies. Below is that the flow as taken directly from the Istio documentation.\"), mdx(\"ul\", null, mdx(\"li\", null, \"If there are any CUSTOM policies that match the request, evaluate and deny the request if the evaluation result's is deny.\"), mdx(\"li\", null, \"If there are any DENY policies that match with the request, deny the request.\"), mdx(\"li\", null, \"If there are not any ALLOW policies for the workload, allow the request.\"), mdx(\"li\", null, \"If any of the ALLOW policies gets match with the request, allow the request.\"), mdx(\"li\", null, \"Deny the request.\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Istio Authorization Policy","subtitle":null,"date":"June 1st, 2022","author":null,"category":"Service Mesh","tags":["Istio"],"description":null,"thumbnail":{"childImageSharp":null,"extension":"svg","publicURL":"/static/731763d720780a49c2ffdfede8c28f4b/istio.svg"}},"fields":{"slug":"/resources/service-mesh/istio-authorization-policy"}}},"pageContext":{"slug":"/resources/service-mesh/istio-authorization-policy"}},"staticQueryHashes":["1485533831","3750885592","4047814605","4053865456"],"slicesMap":{},"matchPath":"/resources/service-mesh/istio-authorization-policy"}