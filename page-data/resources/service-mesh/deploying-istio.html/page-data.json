{"componentChunkName":"component---src-templates-resource-single-js","path":"/resources/service-mesh/deploying-istio.html","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Deploying Istio\",\n  \"thumbnail\": \"../../../../assets/images/service-mesh-icons/istio.svg\",\n  \"darkthumbnail\": \"../../../../assets/images/service-mesh-icons/istio.svg\",\n  \"date\": \"2021-09-02 10:30:05 -0530\",\n  \"type\": \"Article\",\n  \"category\": \"Service Mesh\",\n  \"mesh\": \"Istio\",\n  \"technology\": \"Docker\",\n  \"tags\": [\"Istio\"],\n  \"featured\": false,\n  \"published\": true,\n  \"resource\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(ResourcesWrapper, {\n    mdxType: \"ResourcesWrapper\"\n  }, mdx(\"div\", {\n    className: \"intro\"\n  }, mdx(\"p\", null, \"Istio is a massive project with a wide range of capabilities and deployment options. We will perform a basic installation on your local machine and deploy a few services onto the mesh. Let\\u2019s start by understanding its supported platforms and configuring our environment for deployment.\")), mdx(\"h3\", null, \"Preparing Your Environment for Istio\"), mdx(\"p\", null, \"In addition to Istio, we'll be deploying BookInfo, its sample\\xA0application. Our Istio and BookInfo deployments will lay down several containers. We will use Kubernetes as the platform to manage these containers. Kubernetes is a robust container orchestration system capable of forming clusters (a collection of nodes) and scheduling containers across nodes within the fleet of host machines (nodes) that form the cluster. Nodes are Linux or Windows servers that can run containers with a Kubernetes agent, kubelet, installed. Kubernetes is the first and best supported underlying platform among a variety of to-be-supported underlying systems. As a result, we'll be using Kubernetes throughout our examples. To be clear, Istio is not dependent on Kubernetes. Istio is designed to be platform agnostic and supports multiple deployment platforms including those without a container orchestrator.\"), mdx(\"h4\", null, \"Docker Desktop as the Installation Environment\"), mdx(\"p\", null, \"We can deploy Kubernetes in a variety of ways. We'll utilize Docker Desktop as a convenient tool for this. Docker Desktop is an easy-to-install application for your Mac or Windows environment\\xA0that allows you to run Kubernetes and Istio on your local machine.\"), mdx(\"p\", null, \"Install Docker Desktop and verify that you have a functional Docker environment by running \", mdx(\"code\", null, \"`$ docker run hello-world`\"), \" on the command line. If you get a \", mdx(\"code\", null, \"\\u201CHello from Docker!\\u201D\"), \" message, you\\u2019ve confirmed that Docker isable to pull images, create new instances, and run as expected.\"), mdx(\"p\", null, \"We'll run Kubernetes on Docker Desktop and leverage Kubernetes as the platform to deploy\\xA0Istio. The Docker Desktop managed Kubernetes server is a single-node Kubernetes cluster that runs locally within your Docker instance. It is not configurable.\"), mdx(\"p\", null, \"The Docker Desktop for Mac Kubernetes integration provides the Kubernetes CLI executable at \", mdx(\"code\", null, \"/usr/local/bin/kubectl\"), \". The Docker Desktop for Windows Kubernetes integration provides the Kubernetes CLI executable at \", mdx(\"code\", null, \"C:\\\\>Program Files\\\\Docker\\\\Docker\\\\Resources\\\\bin\\\\kubectl.exe\"), \". This location may not be in your shell\\u2019s \", mdx(\"code\", null, \"PATH\"), \" variable, so you may need to type the full path of the command or add it to the \", mdx(\"code\", null, \"PATH\"), \". For more information about \", mdx(\"code\", null, \"kubectl\"), \", see the official \", mdx(\"code\", null, \"kubectl\"), \" documentation.\"), mdx(\"h4\", null, \"Configuring Docker Desktop\"), mdx(\"p\", null, \"To make sure your Docker Desktop virtual machine has enough memory to run Kubernetes, Istio, and Istio's sample application, BookInfo, you'll need to set it up with at least 4GiB of RAM. All Istio and BookInfo services require this amount of memory to operate effectively.\\xA0 Pilot, in particular, may have problems running as it requests\\xA02048Mi of memory in an Istio deployment with default settings (see \", mdx(Link, {\n    to: \"/resources/service-mesh/istio-v15-at-a-glance\",\n    mdxType: \"Link\"\n  }, \" Istio v1.5 at a Glance\"), \" for a quick overview of Pilot's purpose). Considering 2048Mi is also the default limit for Docker Desktop, Pilot may refuse to start due to insufficient resources\\xA0if this limit is not increased in your Docker installation.\"), mdx(\"p\", null, \"Instead of increasing the amount of memory allocated to your Docker Desktop installation, you may limit the amount of memory that Pilot requests of your Kubernetes cluster.  Depending on whether you're utilizing a package manager like Helm or directly using Kubernetes spec files, there are a couple of options.\"), mdx(\"p\", null, \"Using \", mdx(\"code\", null, \"install/kubernetes/istio-demo.yaml\"), \" as an example manifest, lets highlights which section of the Pilo spec to edit in order to reduce the 2048Mi of memory requested by Pilot to something smaller like 512Mi.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"apiVersion: extensions/v1beta1\\nkind: Deployment\\nmetadata:\\n  name: istio-pilot\\n  namespace: istio-system\\n...\\n          resources:\\n            requests:\\n              cpu: 500m\\n              memory: 2048Mi\\n...\\n\\n\")), mdx(\"p\", null, \"When deploying Istio with Helm, you can also offer custom settings. To customize Istio install using Helm, use the \", mdx(\"code\", null, \"--set key=value\"), \" option in Helm command to override one or more values. An example of reducing Pilot\\u2019s requested memory resources is shown below.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ helm template install/kubernetes/helm/istio --name istio --namespace istio-system --set pilot.resources.requests.memory=\\\"512Mi\\\" | kubectl apply -f -\\n\")), mdx(\"h4\", null, \"Deploying Kubernetes\"), mdx(\"p\", null, \"If Kubernetes is not installed on your desktop please refer to Troubleshooting for helpful tips on installing Kubernetes. Verify \", mdx(\"code\", null, \"kubectl\"), \" installation by running:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ kubectl version --short\\nClient Version: v1.13.0\\nServer Version: v1.13.0\\n\\n\")), mdx(\"p\", null, \"If you see both client and server version numbers, your \", mdx(\"code\", null, \"kubectl\"), \" client is installed in your \", mdx(\"code\", null, \"PATH\"), \" and a Kubernetes cluster is accessible. Verify Kubernetes installation and your current context by running \", mdx(\"code\", null, \"`$ kubectl get nodes`\"), \" which will confirm that your kubeconfig (typically located at \", mdx(\"code\", null, \"~/.kube/config\"), \") is correctly configured to the `docker-desktop` context and your single-node cluster is up:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ kubectl get nodes\\nNAME             STATUS   ROLES    AGE   VERSION\\ndocker-desktop   Ready    master   32m   v1.13.0\\n\\n\")), mdx(\"h4\", null, \"Install Kubernetes Dashboard\"), mdx(\"p\", null, \"The Kubernetes dashboard is a web-based user interface that allows you to manage your cluster and its\\xA0resources. Containerized applications can be deployed and troubleshooted. The Kubernetes dashboard shows the current state of\\xA0Kubernetes resources in your cluster\\xA0as well as any faults that may have occurred. The Kubernetes dashboard can be used to reinforce your understanding of how Istio runs. The easiest and most common way to access the cluster is through \", mdx(\"code\", null, \"kubectl proxy\"), \", which creates a local web server that securely proxies data to the Kubernetes dashboard through the Kubernetes API server.\\xA0Execute the following command to deploy the Kubernetes dashboard:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended/kubernetes-dashboard.yaml\\n\\n\")), mdx(\"p\", null, \"Once deployed, you can access the Kubernetes dashboard using the kubectl command-line tool by running the following command:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ kubectl proxy\\n\")), mdx(\"p\", null, \"This command creates a local web server that uses the Kubernetes API server to securely proxy data to the Kubernetes dashboard. It's important to note that the Kubernetes dashboard can only be accessed from the machine where the command is executed.\"), mdx(\"p\", null, \"See \", mdx(\"code\", null, \"kubectl proxy --help\"), \" for more options and the Kubernetes dashboard documentation for more information. \", mdx(\"code\", null, \"kubectl\"), \" will make the Kubernetes dashboard available at \", mdx(\"code\", null, \"http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/\"), \".\"), mdx(\"p\", null, \"Dashboard deploys with a minimal RBAC configuration by default to secure your cluster data. Only a Bearer Token is currently supported for logging into the Kubernetes dashboard. Create a sample user and use its token, or use an existing token provided by your Docker Desktop deployment, and then run:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | awk '/default-token/ {print $1}')\\n\")), mdx(\"p\", null, \"This will print something similar to:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Name:         default-token-tktcn\\nNamespace:    kube-system\\nLabels:       <none>\\nAnnotations:  kubernetes.io/service-account.name: default\\n              kubernetes.io/service-account.uid: 3a0a68b1-4abd-11e9-8561-025000000001\\n\\nType:  kubernetes.io/service-account-token\\n\\nData\\n====\\nca.crt:     1025 bytes\\nnamespace:  11 bytes\\ntoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkZWZhdWx0LXRva2VuLXRrdGNuIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImRlZmF1bHQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIzYTBhNjhiMS00YWJkLTExZTktODU2MS0wMjUwMDAwMDAwMDEiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06ZGVmYXVsdCJ9.WBOH85PHBVjky9JZLidfzS8EWNunIlFZR8MIJjMgBxQbVnqaVl0RmzcvZqYZRY9W7bwQddkXXHAuw5QQMfy8S-I2KdgxpQEP18tfU9wicv6TWt9bRfw9N7QsvB-twlMCEpRKtHwrORZqgRb7_13UH14RB18DiUAIiMok6rs1Pl5w9y0RXVUk9_RXMA2hJnkZ09cTOqJmQ80Vg4QvgAhuxwgmb6kl2rMjb0LegXihAN6j6Yv_JHZ2Vgjk73Priig0Pbjic6t87XfO51Kgjgw7g0vCF0OlOylvp-5oroPMa3nnnlqh6PGnFzOq0zLqjqYXMXZFI5cWkNmf71Q_qKSOsA\\n\\n\")), mdx(\"p\", null, \"Copy the token and use it to authenticate in the Kubernetes dashboard.\"), mdx(\"h3\", null, \"Installing Istio\"), mdx(\"p\", null, \"With Kubernetes deployed and dashboard up, it\\u2019s time to install our service mesh. You can download the latest Istio release by executing the following command:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ curl -L https://git.io/getLatestIstio | sh -\\n\")), mdx(\"p\", null, \"The script fetches the latest Istio release candidate and untars it.\"), mdx(\"p\", null, \"If you would like to fetch a particular version of Istio, specify the desired version number as so:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ curl -L https://git.io/getLatestIstio | ISTIO_VERSION=1.1.0 sh -\\n\")), mdx(\"p\", null, \"Istio can also be downloaded from the \", mdx(\"a\", {\n    href: \"https://github.com/istio/istio/releases\"\n  }, \"Istio release page\"), \".\\xA0There are versions for Windows, MacOS, and Linux to pick from. After downloading the distribution for your operating system, extract the compressed file to a directory and acquaint yourself with the contents of the distribution, regardless of the operating system you're using.\"), mdx(\"p\", null, \"Each release includes \", mdx(\"code\", null, \"istioctl\"), \", configuration samples, a sample application and platform-specific installation resources. \", mdx(\"code\", null, \"istioctl\"), \" is a command line utility for service operators to debug and diagnose their Istio service mesh. Alternatively, \", mdx(\"code\", null, \"istioctl\"), \" can be installed via your preferred  package manager.\"), mdx(\"p\", null, \"Explore release contents on MacOS or Linux by changing directory to \\u201Cistio-x.x.x\\u201D. For example: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ cd istio-1.1.0\\n\")), mdx(\"p\", null, \"This directory contains the files necessary for installing Istio, sample files and also \", mdx(\"code\", null, \"istioctl\"), \", an important command-line tool used to manage your Istio deployment.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ ls -l\\ntotal 48\\n-rw-r--r--   1  user  staff  11343 Mar 18 16:08 LICENSE\\n-rw-r--r--   1  user  staff   5921 Mar 18 16:08 README.md\\ndrwxr-xr-x   3  user  staff     96 Mar 18 16:08 bin\\ndrwxr-xr-x   7  user  staff    224 Mar 18 16:08 install\\n-rw-r--r--   1  user  staff    602 Mar 18 16:08 istio.VERSION\\ndrwxr-xr-x  16  user  staff    512 Mar 18 16:08 samples\\ndrwxr-xr-x  21  user  staff    672 Mar 18 16:08 tools\\n\")), mdx(\"p\", null, \"The installation directory contains Istio installation \", mdx(\"code\", null, \"YAML\"), \" files for Kubernetes in \", mdx(\"code\", null, \"install/\"), \", sample applications in \", mdx(\"code\", null, \"samples/\"), \", the \", mdx(\"code\", null, \"istioctl\"), \" client binary in the \", mdx(\"code\", null, \"bin/\"), \" directory. The \", mdx(\"code\", null, \"istio.VERSION\"), \" configuration file contains a list of Istio components and their version numbers for the release\\u2019s distribution.\"), mdx(\"p\", null, mdx(\"code\", null, \"istioctl\"), \" is the Istio configuration command line utility. \", mdx(\"code\", null, \"istioctl\"), \" is used for setting routing rules, policies, and injecting Envoy as a service proxy manually, among other things. It is also used to create, list, modify, and delete configuration resources in the Istio system. Let\\u2019s add it to your \", mdx(\"code\", null, \"PATH\"), \" environment variable:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ export PATH=$PWD/bin:$PATH\\n\")), mdx(\"p\", null, \"Verify your istioctl installation by running:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ istioctl version\\n\")), mdx(\"p\", null, \"This should validate path and istioctl command options (see Example 4.7). If not, see Troubleshooting. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"version.BuildInfo{\\nVersion:\\\"1.1.0\\\", GitRevision:\\\"82797c0c0649a3f73029b33957ae105260458c6e\\\", \\nUser:\\\"root\\\", \\nHost:\\\"996cd064-49c1-11e9-813c-0a580a2c0506\\\", GolangVersion:\\\"go1.10.4\\\", \\nDockerHub:\\\"docker.io/istio\\\", \\nBuildStatus:\\\"Clean\\\", \\nGitTag:\\\"1.1.0-rc.6\\\"\\n}\\n\")), mdx(\"p\", null, \"Now that we have downloaded an Istio distribution and verified it\\u2019s CLI tool, istioctl, is functional on our local machine, let\\u2019s perform a basic installation.\"), mdx(\"h4\", null, \"Istio Installation Options\"), mdx(\"p\", null, \"There are numerous installation and deployment architectures to choose from. Typically, installations fit into one of the following categories:\"), mdx(\"h5\", null, \"Choice of Security Configuration\"), mdx(\"ul\", null, mdx(\"li\", null, \"Install with strict mutual TLS authentication.\", mdx(\"ul\", null, mdx(\"li\", null, \"Recommended for fresh kubernetes cluster. This method enforces authentication between sidecars by default.\"))), mdx(\"li\", null, \"Install with permissive mutual TLS authentication between sidecars.\", mdx(\"ul\", null, mdx(\"li\", null, \"Recommended if you have existing clusters and services.\"), mdx(\"li\", null, \"Recommended if you have applications where services with an Istio sidecar need to be able to communicate with other non-Istio Kubernetes services\"))), mdx(\"li\", null, \"Custom deployments that include or exclude certain default Istio components.\", mdx(\"ul\", null, mdx(\"li\", null, \"Recommended if a function of one of Istio\\u2019s components isn\\u2019t necessary or desired in your environment (e.g. removal of Citadel if mTLS is not to be used).\")))), mdx(\"h5\", null, \"Choice of Deployment Utility\"), mdx(\"ul\", null, mdx(\"li\", null, \"Render Kubernetes manifests directly with kubectl.\", mdx(\"ul\", null, mdx(\"li\", null, \"Recommended for understanding Istio\\u2019s underpinnings more explicitly.\"))), mdx(\"li\", null, \"Render Kubernetes manifests with a package / configuration management system like Helm or Ansible.\", mdx(\"ul\", null, mdx(\"li\", null, \"Recommended for production deployments with templated configuration.\")))), mdx(\"h4\", null, \"Registering Istio\\u2019s Custom Resources\"), mdx(\"p\", null, \"Use the following command to apply Istio\\u2019s CustomResourceDefinition objects to your cluster:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ for i in install/kubernetes/helm/istio-init/files/crd*yaml; do kubectl apply -f $i; done\\n\")), mdx(\"p\", null, \"This installation does not leverage Helm (a package manager for Kubernetes). The generally preferred method for any installation of Istio that may find its way into production is to use Helm or Ansible; both included in the distribution you just downloaded. With Helm or Ansible you get more flexibility in which components you install and can fine-tune your setup.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ kubectl  api-resources | grep istio\\nmeshpolicies                                   authentication.istio.io        false        MeshPolicy\\npolicies                                       authentication.istio.io        true         Policy\\nadapters                                       config.istio.io                true         adapter\\napikeys                                        config.istio.io                true         apikey\\nattributemanifests                             config.istio.io                true         attributemanifest\\nauthorizations                                 config.istio.io                true         authorization\\nbypasses                                       config.istio.io                true         bypass\\nchecknothings                                  config.istio.io                true         checknothing\\ncirconuses                                     config.istio.io                true         circonus\\ncloudwatches                                   config.istio.io                true         cloudwatch\\n...\\n\")), mdx(\"p\", null, \"Istio actually registers new types of resources, Custom Resource Definitions (CRDs) which represent things like Gateways or Services. We can manipulate (create/update/delete) them just like any other Kubernetes object:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ kubectl get crd | grep istio\\nadapters.config.istio.io               2019-03-24T03:17:08Z\\napikeys.config.istio.io                2019-03-24T03:17:07Z\\nattributemanifests.config.istio.io     2019-03-24T03:17:07Z\\nauthorizations.config.istio.io         2019-03-24T03:17:07Z\\nbypasses.config.istio.io               2019-03-24T03:17:07Z\\nchecknothings.config.istio.io          2019-03-24T03:17:07Z\\ncirconuses.config.istio.io             2019-03-24T03:17:07Z\\ncloudwatches.config.istio.io           2019-03-24T03:17:08Z\\nclusterrbacconfigs.rbac.istio.io       2019-03-24T03:17:07Z\\ndeniers.config.istio.io                2019-03-24T03:17:07Z\\ndestinationrules.networking.istio.io   2019-03-24T03:17:07Z\\ndogstatsds.config.istio.io             2019-03-24T03:17:08Z\\nedges.config.istio.io                  2019-03-24T03:17:08Z\\nenvoyfilters.networking.istio.io       2019-03-24T03:17:07Z\\n...\\n\")), mdx(\"p\", null, \"Once Istio\\u2019s custom resources are registered with Kubernetes, Istio control plane components may be installed.\"), mdx(\"h4\", null, \"Installing Istio Control Plane Components\"), mdx(\"p\", null, \"The istio-demo.yaml specification file contains Istio configuration that allows services to run in mutual TLS permissive mode. If you have existing services or applications in your Kubernetes cluster, it\\xA0is recommended to use mTLS permissive mode. If you're setting up a fresh\\xA0cluster, security best practises recommend using \", mdx(\"code\", null, \"istio-demo-auth.yaml\"), \"\\xA0to encrypt service traffic between sidecars.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ kubectl apply -f install/kubernetes/istio-demo.yaml\\n\")), mdx(\"p\", null, \"Please wait for a few minutes to let the installation run, for the Docker images to properly download and for the deployments to succeed. The application of this extensive yaml file has Kubernetes realize many new Custom Resource Definitions.\"), mdx(\"p\", null, \"You might also use \", mdx(\"code\", null, \"istio-demo-auth.yaml\"), \", which enforces mutual TLS authentication between all clients and servers. You might consider that initial deployment of Istio with strict mTLS enforcement configured is most successfully used within fresh Kubernetes cluster where all workloads will be Istio-enabled. To apply Istio setup with mutual TLS authentication, use the command below:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ kubectl apply -f install/kubernetes/istio-demo-auth.yaml\\n\")), mdx(\"p\", null, \"Istio's control plane is installed in its own istio-system namespace, and it supervises services in all other namespaces with sidecar proxies, or in other words, all other namespaces with services on the mesh. The control plane is deployed in the istio-system namespace act as a cluster-wide, which means that behaves in a single-tenant fashion.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ kubectl get namespaces\\nNAME           STATUS   AGE\\ndefault        Active   49d\\ndocker         Active   49d\\nistio-system   Active   2m15s\\nkube-public    Active   49d\\nkube-system    Active   49d\\n\")), mdx(\"p\", null, \"Verify installation of the control plane into the \", mdx(\"code\", null, \"istio-system\"), \" namespace using commands:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ kubectl get namespaces\\nNAME           STATUS   AGE\\ndefault        Active   49d\\ndocker         Active   49d\\nistio-system   Active   2m15s\\nkube-public    Active   49d\\nkube-system    Active   49d\\n\\nExample 4.11 - istio-system namespace created to contain Istio control plane components.\\n\\nVerify installation of the control plane into the istio-system namespace using commands:\\n\\n$ kubectl get svc -n istio-system\\nNAME                     TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)                                                                                                                                      AGE\\ngrafana                  ClusterIP      10.108.237.105   <none>        3000/TCP                                                                                                                                     11d\\nistio-citadel            ClusterIP      10.108.165.14    <none>        8060/TCP,15014/TCP                                                                                                                           11d\\nistio-egressgateway      ClusterIP      10.107.148.169   <none>        80/TCP,443/TCP,15443/TCP                                                                                                                     11d\\n...\\n\\n$ kubectl get pod -n istio-system\\nNAME                                      READY   STATUS      RESTARTS   AGE\\ngrafana-57586c685b-jr2pd                  1/1     Running     0          5m45s\\nistio-citadel-645ffc4999-8j4v6            1/1     Running     0          5m45s\\nistio-cleanup-secrets-1.1.0-4c9pc         0/1     Completed   0          5m48s\\nistio-egressgateway-5c7fd57fdb-85g26      1/1     Running     0          5m46s\\nistio-galley-978f9447f-mj5xj              1/1     Running     0          5m46s\\nistio-grafana-post-install-1.1.0-g49gh    0/1     Completed   0          5m48s\\nistio-ingressgateway-8ccdc79bc-8mk4p      1/1     Running     0          5m46s\\nistio-pilot-649455846-klc8c               2/2     Running     0          5m45s\\nistio-policy-7b7d7f644b-sqsp8             2/2     Running     4          5m45s\\nistio-security-post-install-1.1.0-v4ffp   0/1     Completed   0          5m48s\\nistio-sidecar-injector-6dcc9d5c64-tklqz   1/1     Running     0          5m45s\\nistio-telemetry-6d494cd676-n6pkz          2/2     Running     4          5m45s\\nistio-tracing-656f9fc99c-nn9hd            1/1     Running     0          5m44s\\nkiali-69d6978b45-7q7ms                    1/1     Running     0          5m45s\\nprometheus-66c9f5694-2xzpm                1/1     Running     0          5m45s\\n\")), mdx(\"p\", null, \"We've only deployed half of the service mesh so far, the control plane. You may not have noticed service proxies prior to deploying the sample application, and thus the data plane, because we have not deployed any services (applications) to run on the mesh. You may believe that no proxies are running, but you would be overlooking the fact that two proxies are already running. Our service proxy is up and operating on both the ingress and egress gateways. Let's have a look.\"), mdx(\"h4\", null, \"Deploy Sample Application\"), mdx(\"p\", null, \"Let's get started by deploying our first set of services (an application) to the service mesh. We'll utilise BookInfo, an Istio sample application that demonstrates many aspects of the value proposition of service meshes. The Kubernetes manifest files for BookInfo may be found in the \", mdx(\"code\", null, \"samples/bookinfo/\"), \" subdirectory in your release distribution folder.\\xA0 Let's take a moment to familiarise with this application.\"), mdx(\"p\", null, \"To populate the page, users call the \", mdx(\"code\", null, \"productpage\"), \"\\xA0microservice, which then calls the \", mdx(\"code\", null, \"details\"), \"\\xA0and \", mdx(\"code\", null, \"reviews\"), \"\\xA0microservices. The book information can be found in the \", mdx(\"code\", null, \"details\"), \"\\xA0microservice. The \", mdx(\"code\", null, \"reviews\"), \" microservice contains book reviews and subsequently calls the \", mdx(\"code\", null, \"ratings\"), \" microservice to retrieve reviews. The \", mdx(\"code\", null, \"ratings\"), \" microservice contains book ranking in the form of a 1 to 5 star book review.\\xA0\\xA0There are three versions of the \", mdx(\"code\", null, \"reviews\"), \"\\xA0microservice: Each of the four application services are written in a different language - Python, Ruby, Java, Nodejs, which further demonstrates the value of a service mesh.\"), mdx(\"ul\", null, mdx(\"li\", null, \"reviews v1 has no ratings (does not call the ratings service).\"), mdx(\"li\", null, \"reviews v2 has ratings of 1 to 5 black stars (calls the ratings service).\"), mdx(\"li\", null, \"reviews v3 has ratings of 1 to 5 red stars (calls the ratings service).\")), mdx(\"p\", null, \"The application does not need to be changed to run the sample using Istio. Instead, we'll configure and run the services in an Istio-enabled environment, with service proxies injected alongside each service as sidecars. Istio's service proxies can be injected as sidecars to application services either manually or automatically. As we deploy our sample application, let's have a look at how automated sidecar injection works.\"), mdx(\"h4\", null, \"Deploying Sample App with Automatic Sidecar Injection\"), mdx(\"p\", null, \"Istio will deploy a sidecar injector in order to have Envoy deployed as sidecars to each of our services. Let's check for the presence of the sidecar injector deployment and its namespace label, which specifies that pods in a specific namespace will have sidecar injected automatically upon deployment (admission):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ kubectl -n istio-system get deployment -l istio=sidecar-injector\\nNAME                     READY   UP-TO-DATE   AVAILABLE   AGE\\nistio-sidecar-injector   1/1     1            1           82m\\n\")), mdx(\"p\", null, \"Label the default namespace with \", mdx(\"code\", null, \"istio-injection=enabled\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ kubectl label namespace default istio-injection=enabled\\n\")), mdx(\"p\", null, \"And confirm which namespaces have the istio-injection label associated:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ kubectl get namespace -L istio-injection\\nNAME           STATUS    AGE       ISTIO-INJECTION\\ndefault        Active    1h        enabled\\nDocker         Active    1h        enabled\\nistio-system   Active    1h        disabled\\nkube-public    Active    1h        \\nkube-system    Active    1h\\n\")), mdx(\"p\", null, \"The \", mdx(\"code\", null, \"istio-demo.yaml\"), \" deployment we ran has automatic injection configured.\"), mdx(\"p\", null, \"We can now deploy the sample app after installing the sidecar injector with modifying admission webhook and the namespace designated for automatic sidecar injection.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml\\n\")), mdx(\"p\", null, \"With sample application deployed, you can confirm that automatic sidecar injection is working in your environment by inspecting any one of the BookInfo pods and noting the istio-proxy container as a new addition to the application pod.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ kubectl describe po/productpage-v1-....\\n...\\nistio-proxy:\\n    Container ID:  docker://f28abdf1f0acf92687711488f7fcca8cc5968e2ed39d8275bf57cc46b5ae2257\\n    Image:         docker.io/istio/proxyv2:1.1.7\\n    Image ID:      docker-pullable://istio/proxyv2@sha256:e6f039115c7d5ef9c8f6b049866fbf9b6f5e2255d3a733bb8756b36927749822\\n    Port:          15090/TCP\\n    Host Port:     0/TCP\\n    Args:\\n      proxy\\n      sidecar\\n...\\n\")), mdx(\"h4\", null, \"Networking with the Sample App\"), mdx(\"p\", null, \"After the Bookinfo services are up and running, you'll need to make the application accessible from outside your Kubernetes cluster, such as through a browser. This is accomplished through the usage of an Istio Gateway. You'll need to specify the application's ingress gateway:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml\\n\")), mdx(\"p\", null, \"Confirm the gateway has been created:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ kubectl get gateway\\n\\nNAME               AGE\\nbookinfo-gateway   7m\\n\")), mdx(\"p\", null, \"Find where the \", mdx(\"code\", null, \"productpage\"), \"\\xA0has been exposed as a service available to handle requests from outside of the cluster to interact with the freshly deployed application.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ echo \\\"http://$(kubectl get nodes -o template --template='{{range.items}}{{range.status.addresses}}{{if eq .type \\\"InternalIP\\\"}}{{.address}}{{end}}{{end}}{{end}}'):$(kubectl get svc istio-ingressgateway -n istio-system -o jsonpath='{.spec.ports[0].nodePort}')/productpage\\\"\\n\\nhttp://x.x.x.x:31380/productpage\\n\")), mdx(\"h4\", null, \"Uninstall Istio\"), mdx(\"p\", null, \"It's a common mistake to assume that deleting the istio-system namespace will uninstall\\xA0Istio. Deleting the istio-system removes Istio\\u2019s control plane components, but leaves CRDs, sidecars and other artifacts resident in your cluster. Uninstalling Istio is as simple as executing this command from within your istio release folder:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ kubectl delete -f install/kubernetes/istio-demo.yaml\\n\")), mdx(\"p\", null, \"This will not delete all of the Istio custom resource definitions, mesh configuration and sample application, however. In order to delete these, run:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ for i in install/kubernetes/helm/istio-init/files/crd*yaml; do kubectl delete -f $i; done\\n$ kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml\\n$ kubectl delete -f samples/bookinfo/networking/bookinfo-gateway.yaml\\n\")), mdx(\"p\", null, \"You can verify the success of Istio and BookInfo\\u2019s removal by running:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ kubectl get crds\\n$ kubectl get pods\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Deploying Istio","subtitle":null,"date":"September 2nd, 2021","author":null,"category":"Service Mesh","tags":["Istio"],"description":null,"thumbnail":{"childImageSharp":null,"extension":"svg","publicURL":"/static/731763d720780a49c2ffdfede8c28f4b/istio.svg"}},"fields":{"slug":"/resources/service-mesh/deploying-istio"}}},"pageContext":{"slug":"/resources/service-mesh/deploying-istio"}},"staticQueryHashes":["1485533831","3750885592","4047814605","4053865456"],"slicesMap":{},"matchPath":"/resources/service-mesh/deploying-istio"}