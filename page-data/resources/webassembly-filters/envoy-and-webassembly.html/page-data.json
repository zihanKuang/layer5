{"componentChunkName":"component---src-templates-resource-single-js","path":"/resources/webassembly-filters/envoy-and-webassembly.html","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Envoy and WebAssembly\",\n  \"thumbnail\": \"./wasm-envoy.svg\",\n  \"darkthumbnail\": \"./wasm-envoy.svg\",\n  \"date\": \"2021-10-29 10:30:05 -0530\",\n  \"category\": \"WebAssembly Filters\",\n  \"type\": \"Article\",\n  \"technology\": \"WebAssembly\",\n  \"tags\": [\"WebAssembly\", \"Envoy\"],\n  \"published\": true,\n  \"resource\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(ResourcesWrapper, {\n    mdxType: \"ResourcesWrapper\"\n  }, mdx(\"div\", {\n    className: \"intro\"\n  }, mdx(\"p\", null, \"Learn more about WebAssembly's use within service mesh data planes in \", mdx(Link, {\n    className: \"blog\",\n    to: \"/learn/service-mesh-books/the-enterprise-path-to-service-mesh-architectures-2nd-edition\",\n    mdxType: \"Link\"\n  }, \"The Enterprise Path to Service Mesh Archictures (2nd Edition)\"), \" -  free book and excellent resource for anyone looking to understand WASM filters, Lua scripts, and other options available for extending the data plane.\")), mdx(\"p\", null, \"WASM stands for WebAssembly, which is an open standard for defining a binary format for executable programs. It also defines Interfaces for interacting with host environments through the WebAssembly System Interface (WASI). Browsers and large web applications were the primary focus of these host environments, with the goal of securely running programmes to enhance performance. The W3C maintains WASM as an open standard, and all modern browsers have adopted it. WebAssembly is the fourth language that can run natively in web browsers, following HTML, CSS, and Javascript.\"), mdx(\"p\", null, \"Google's open-source high-performance JavaScript and WebAssembly engine, V8, is being embedded into Envoy, bringing WASM support to the platform. Envoy exposes an Application Binary Interface (ABI) to WASM modules via the WebAssembly System Interface, allowing them to function as Envoy filters. WASI operates effortlessly. Your application is written in one of your favorite languages, such as Rust, C++, or C. Then, for the host environment, build and compile them into a WebAssembly binary. For the resulting binary to execute, the WebAssembly runtime must offer the necessary interfaces to system calls. Conceptually, this is similar to JVM. If you have a JVM installed, then you can run any Java-like languages on it. Similarly, with a runtime, you can run the WebAssembly binary.\"), mdx(\"p\", null, \"Additional filters can be added to Envoy in one of two ways:\", mdx(\"ul\", null, mdx(\"li\", null, \"By incorporating your custom filter into Envoy's C++ source code and building a new version of Envoy natively. The disadvantage is that you'll have to maintain your own version of Envoy, but the advantage is that your custom filter will run at native speed.\"), mdx(\"li\", null, \"Via WASM, by developing your custom filter in C++, Rust, AssemblyScript, or Go and integrating it as a WebAssembly binary. The disadvantage is that WASM-based filters have considerable overhead, but the advantage is that WASM-based filters may be dynamically loaded and reloaded in Envoy at runtime.\"))), mdx(\"p\", null, \"On startup, Envoy's configuration is initialised using bootstrap. The xDS APIs in Envoy enable\\xA0dynamic configuration loading and reloading during runtime. There are several sections in the Envoy configuration (e.g. LDS which is for configuring Listeners and CDS which is for configuring clusters). WASM plugins can be configured in each section (programs).\"), mdx(\"h3\", null, \"Dynamically (Re)loadable Intelligence\"), mdx(\"p\", null, \" Data planes are powerful because they can dynamically load WASM programs to inspect, rewrite, and reroute packets carrying application requests. WASM applications can integrate business logic considerations when filtering application requests when using a management plane. The service mesh can implement business logic, as well as common application infrastructure logic: \"), mdx(\"ul\", null, mdx(\"li\", null, \"Subscription plan enforcement: rate limiting requests based on user\\u2019s subscription plan\"), mdx(\"li\", null, \"Class of Service: directing requests to high performance clusters based on user demographics or activity\"), mdx(\"li\", null, \"Multivariate testing: facilitating comparison a of high number of variables between deployments (service versions) and users\")), mdx(\"div\", {\n    className: \"fact\"\n  }, mdx(\"p\", null, \"To get a feel of these\\xA0capabilities, try experimenting with the \", mdx(Link, {\n    to: \"/projects/image-hub\",\n    mdxType: \"Link\"\n  }, \"Image Hub\"), \",a prototype application developed in Rust that runs on Consul and allows you to explore WebAssembly modules used as Envoy filters.\")), mdx(\"div\", {\n    className: \"center\"\n  }, mdx(\"img\", {\n    src: Infrastructure,\n    align: \"center\",\n    alt: \"application infrastructure logic\"\n  }), mdx(\"p\", null, \"Figure 1:. How the intelligence of the cloud native management plane and the power of the service mesh data plane combine to deliver application infrastructure logic.  \")), mdx(\"p\", null, \"WebAssembly is intriguing in part because of its performance characteristics, which vary depending on the program/filter used. For network filtering use cases, some have a 10% to 20% overhead as compared to natively executed code.\\xA0 Given its high degree of portability, WebAssembly resembles Docker in certain ways. WASM's virtual stack machine, like the Java Virtual Machine (JVM), is evolving into a write once, run anywhere system (WORA). WASM executables are precompiled with a wide range of languages that support it as a compilation target (currently around 40 languages).\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Envoy and WebAssembly","subtitle":null,"date":"October 29th, 2021","author":null,"category":"WebAssembly Filters","tags":["WebAssembly","Envoy"],"description":null,"thumbnail":{"childImageSharp":null,"extension":"svg","publicURL":"/static/06775492c84a32dae01532165deed01e/wasm-envoy.svg"}},"fields":{"slug":"/resources/webassembly-filters/envoy-and-webassembly"}}},"pageContext":{"slug":"/resources/webassembly-filters/envoy-and-webassembly"}},"staticQueryHashes":["1485533831","3750885592","4047814605","4053865456"],"slicesMap":{},"matchPath":"/resources/webassembly-filters/envoy-and-webassembly"}