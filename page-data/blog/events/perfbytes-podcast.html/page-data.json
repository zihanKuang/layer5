{"componentChunkName":"component---src-templates-blog-single-js","path":"/blog/events/perfbytes-podcast.html","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Perfbytes Podcast\",\n  \"subtitle\": \"Ask Me Anything\",\n  \"date\": \"2022-06-01 09:10:00 +0000\",\n  \"author\": \"Debopriya Bhattacharjee\",\n  \"thumbnail\": \"./perfbytes-layer5.svg\",\n  \"darkthumbnail\": \"./perfbytes-layer5.svg\",\n  \"category\": \"Events\",\n  \"tags\": [\"Events\", \"Service Mesh Performance\", \"Meshery\"],\n  \"published\": true,\n  \"resource\": true,\n  \"type\": \"Blog\",\n  \"product\": \"Meshery\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(BlogWrapper, {\n    mdxType: \"BlogWrapper\"\n  }, mdx(PerfbytesPodcast, {\n    mdxType: \"PerfbytesPodcast\"\n  }, mdx(\"h2\", null, \"Podcast Insights\"), mdx(\"p\", null, \"Many questions were asked, answered, and a variety of topics were discussed. The story just gets better. This podcast goes deep into service meshes, load generators, circuit breaker, service mesh patterns in addition to a live demo of \", mdx(Link, {\n    to: \"/cloud-native-management/meshery\",\n    mdxType: \"Link\"\n  }, \"Meshery\"), \" and more. Hosted by Henrik from Perfbytes and joined by Mark, \", mdx(Link, {\n    to: \"/community/members/lee-calcote\",\n    mdxType: \"Link\"\n  }, \"Lee Calcote\"), \" from Layer5 and Mrittika Ganguli from Intel. Tune in to find out more. Get answers to all community questions as a bonus.\"), mdx(\"h3\", null, \"What is a service mesh?\"), mdx(\"div\", {\n    className: \"answer\"\n  }, mdx(\"p\", null, \"Service mesh is one of the solutions that helps you to route traffic within your cluster so as\\xA0to expose\\xA0your services outside the cluster. It is a solution to control how different parts of an application share data with one another. Unlike other systems for managing this communication, a service mesh is a dedicated infrastructure layer built right into an app. You have different options like the service type load balancer or using ingress but service mesh makes sense because it will manage a lot of features around your service to service communication.\")), mdx(\"p\", null, \"In general, service meshes arose from the concept of proxies such as the NGINX proxy. Then Envoy was introduced by Lyft. Lyft had the architecture, and Google came along and created it. That gave us Istio, which is now part of CNCF. \"), mdx(Blockquote, {\n    quote: \"We were slugging it out in our labs trying to figure out how to do performance benchmarking with a service mesh. Instead of ten tools, if we had just\\xA0one, it would be nice. Then we see Meshery come into the field\",\n    person: \"Mrittika\",\n    mdxType: \"Blockquote\"\n  }), mdx(\"p\", null, \"Service meshes, according to Lee, \\\"hit a real sweet spot\\xA0personally\\\",\\xA0having been focused on networking for most\\xA0part of his career.\\nHe\\xA0believes that there are a couple of different ways to speak about the genesis of service meshes, with Linkerd\\xA0being the first to coin the term.\\nWe had Linkerd v1 written in scala and use jvm and then came Linkerd v2 which is something totally different at this point. It's all different code, different languages and  a different service mesh architecture. There's a number of different architectures by which service meshes are deployed. There's a new one that's been softly announced in beta from called Cilium that is helping bring back some of the different architectures of how to run the proxies.\"), mdx(\"div\", {\n    className: \"intro\"\n  }, mdx(\"p\", null, \"The way I prefer to think about a surface mesh is that it's all about resiliency. If you were to take a three-tiered web or three-tiered app and you think about how you're breaking out those tiers with some amount of kind of vertical scaling,  you'd probably, end up putting at least a virtual IP address out in front of the whole web tier and then you've got an app tier and a database tier because you've got multiple instances of those things. Maybe there's a load balancer in between.  This structure makes it simple to boost your resiliency.\")), mdx(\"p\", null, \"Henrik goes on to elaborate that in service mesh we can do a lot of things to make sure that the communication is reliable.\\nWhen you design microservice architecture, there is a need of implementing retry logic. So if a service A needs to introduce another service B, then the service mesh will manage the retry logic such that if we reach at one time and the service B is not responding then the service mesh will try to reach out several times. Therefore a service mesh offers a variety of features like this to manage the certificates within the cluster and and circle them in a regular pace. You can also have traffic splitting if you do canary releases. In your service to service communication, there are a plethora of scenarios that the service mesh can handle.\\nHenrik\\xA0recalled\\xA0that it's normally difficult to obtain a full view\\xA0of what rules we've applied in the cluster, and\\xA0when he\\xA0first saw Meshery, his immediate\\xA0thought was, \\\"Wow, this is exactly what is missing in the market at the moment.\\\"\"), mdx(\"p\", null, \"Lets dig deeper into this tool we've been alluding to for a while now: \", mdx(Link, {\n    to: \"/cloud-native-management/meshery\",\n    mdxType: \"Link\"\n  }, \"Meshery\"), \".\"), mdx(\"h3\", null, \"Meshery\"), \"If you were on a pager and were\\xA0managing a large service mesh deployment with a number of rules and configurations around how security is enforced and identities are managed, and\\xA0things like uniform observability and how metrics and logs are collected and enforced, and then the different traffic writing rules and stuff. You might soil myself if you had to go make a change in that sea of yaml. That's in part what we're working towards. There's a capability within Meshery for solving this challenge. As a cloud native management plane, Meshery presides over top of 10 different types of service meshes and it also presides over kubernetes. You can run it outside of kubernetes or inside of kubernetes.\", mdx(\"p\", null, \"Meshery has a number of components to its architecture. There is Meshery UI. It has a Mesheryctl, which is a CLI component. We have a number of service mesh adapters for each service mesh that Meshery supports.\"), mdx(\"h5\", null, \"What is the need for different adapters?\"), mdx(\"div\", {\n    className: \"answer\"\n  }, \"Meshery, as the multi-mesh manager, supports couple of different\\xA0adapters. Adapters are used by Meshery to manage the numerous service meshes. Different service mesh adapters are written to expose the unique value of each service mesh. Consequently, they are not equally capable just as each service mesh is not equally capable as the other. Some of them work in a similar way. Some of the service meshes have their own\\xA0differentiated\\xA0value, which is why there are individual adapters. Some of them work slightly differently depending on whether they're running as a managed service or not.\"), mdx(\"p\", null, \"We have a plug-in for Meshery it's called \", mdx(Link, {\n    to: \"/meshmap\",\n    mdxType: \"Link\"\n  }, \"MeshMap\"), \", it is what you might consider a visual topology. It has a lot of use cases for observing in kind of a read-only mode. There's a second mode to this tool: The Designer Mode. It's a visual configurator of not only the specific settings within any of those service meshes that it supports like a circuit breaker and adjusting the sensor video\\nbut also end up being a visual designer for your kubernetes deployments. When users drop in, they're able to go over and grab the specific capabilities of any of those service mesh adapters that are loaded for any of the versions of that mesh that they might want to design. The concept here is that they drag and drop these capabilities over and there's a bit of discoverability that's afforded through this ui rather than parsing through yaml, trying to\\xA0understand what's going on.\"), mdx(\"img\", {\n    src: ConsulDemo,\n    alt: \"Consul MeshMap Demo\",\n    className: \"slides-right\"\n  }), mdx(\"p\", null, \"I like to pretend that I know a lot about service meshes, but when it comes to having to keep track of all\\xA0of them, I don't know what the gateway tls sds config is, and so this\\xA0type of inline help is quite useful to design your deployments. The deployments may or may not use a mesh; in fact, you can use this to create your Kubernetes configuration and deployment as well.\\xA0 You can even\\xA0save and recall those designs.\"), mdx(\"p\", null, \"Taking this example of consul, produced by hashicorp, is a little more of an\\nintriguing deployment and a simple two-tier deck.  We announced the \", mdx(Link, {\n    to: \"/docker-extension-meshery\",\n    mdxType: \"Link\"\n  }, \"Meshery Docker Extension\"), \" recently. So if you're using docker desktop, Meshery will be a first class app that's available inside of market and part of what it does as it integrates with docker desktop is it will import docker compose apps convert them to kubernetes manifests or kubernetes apps and they'll let you deploy those formerly docker compose apps onto a mesh which is why I'm talking about a two-tiered service.\"), mdx(\"h5\", null, \"Does MeshMap allow you to load the current configuration that is has been applied in the current cluster?\"), mdx(\"div\", {\n    className: \"answer\"\n  }, \"Currently, there are two modes: the one we were looking at before was the designer mode, and the one we'll be\\xA0looking at now is the visualizer mode, which is probably a little more of an it's not entirely read-only\\xA0to the extent that you could\\xA0grab a pod and start an interactive session with the containers in that pod or you could you start a logging session. You could also initiate a performance test against\\xA0 that particular service or that particular endpoint.\\xA0 Meshery supports three different types of load generators,\\xA0which is a nighthawk,\\xA0fortio and wrk2.\"), mdx(\"h5\", null, \"What are the capabilities of these three load generators? When you speak about service mesh testing or performance testing, what is actually the process behind the scene? What should users think about when they're starting a gig and need to configure and optimize the service mesh?\"), mdx(\"div\", {\n    className: \"answer\"\n  }, mdx(\"p\", null, \"Lee expounds on that for our benefit. It takes weeks to months that you've got to dedicate for performance engineers to go over and like pull together various tools and scripts around them to then get into a spreadsheet or into some database that you then generate results. The genesis of Meshery part was to help people comprehend what a service mesh is, when to use one and which one to use?  As you go to explain these common questions, the real answer is a totally disappointing, which is, it just depends on what you're asking to do.  \"), mdx(\"p\", null, \"People want to measure it in cold hard quantitative metrics but if you're asking to do 100 percent sampling then also consider the distributed tracing implementation you had somewhere else and the fact that you're getting it in a uniform way here. Maybe you're likely to consider the overhead that you would have over there. It's frustrating to be trying to explain stuff to folks and get them excited about the tech and and to give them a vague response. Instead we give them a tool that says \\\"Hey look here's a tool that will deploy any of the service meshes that you want to test out.\\\"\"), mdx(\"p\", null, \"There's a reason why there's ten of them like and actually many more than that. There's a lot of overlap between them but different tools for different purposes for different size orgs, so it would be inappropriate to say well you know here's the one. It's rather hey here's a tool that that lets you deploy any number of them quickly, answer your own question about performance, because we can pump out benchmarks of the various service meshes under various configurations, using different types of workloads but which may or may not match your environment and over time those reports are going to get stale and so rather he's a tool to make you empowered.\")), mdx(\"h5\", null, \"Do you actually generate traffic that will go through the sidecar proxy of the service and then reach out the actual service?\"), mdx(\"div\", {\n    className: \"answer\"\n  }, \"That load is generated on demand or on schedule against one or more endpoints,\\xA0one or more of your services or something that is\\xA0not even on\\xA0your service. You can generate load not only against something running within your infrastructure but something external as well to do statistical analysis based on the configuration that you gave it and so yeah the answer is yes the traffic flows through the sidecar.\"), mdx(\"h5\", null, \"If I say I have never scripted or built any scenarios for fortio or nighthawk. Let's say I'm a loadrunner, a neoload, or a k6 user, and I want to accomplish the same thing with them. So what is the journey on those load generator? is it the same thing you have to build a workflow of requests that you want to send in that scenario?\"), mdx(\"div\", {\n    className: \"answer\"\n  }, mdx(\"p\", null, \"That leads us to probably talk about one of our other projects which is called \", mdx(Link, {\n    to: \"/projects/cloud-native-performance\",\n    mdxType: \"Link\"\n  }, \" Performance\"), \" which is a specification. It's another one of the projects that we've donated to the CNCF. Service Mesh Performance is the spec while Meshery is an implementation of the spec. At a high level, if those other load generators were to adhere to how we standardize and describe the test that you want to run and then hand off that configuration to generate the performance profiles that are created here  you're not gonna down download them but the descriptor is important.\"), \"This implements a standard for the industry on what is the actual service mesh test and then standardize the format so then anyone can use the same format to design their script or whatever they want and then use it to test. So when I build a script, and I don't know loadrunner today and I want to use neologo tomorrow, then I don't have to rewrite everything. Great!\"), mdx(\"p\", null, \"Missed the podcast? No worries, we got you covered. Check out the recording below :)\"), mdx(\"div\", {\n    className: \"iframe-container\"\n  }, mdx(\"iframe\", {\n    width: \"560\",\n    height: \"315\",\n    src: \"https://www.youtube.com/embed/dGMGUocTvOk\",\n    title: \"YouTube video player\",\n    frameBorder: \"0\",\n    allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n    allowFullScreen: true\n  })))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Perfbytes Podcast","subtitle":"Ask Me Anything","description":null,"date":"June 1st, 2022","author":"Debopriya Bhattacharjee","category":"Events","tags":["Events","Service Mesh Performance","Meshery"],"thumbnail":{"childImageSharp":null,"extension":"svg","publicURL":"/static/4b1ebefd3c3c7dd448c0c60c75b58356/perfbytes-layer5.svg"},"darkthumbnail":{"childImageSharp":null,"extension":"svg","publicURL":"/static/4b1ebefd3c3c7dd448c0c60c75b58356/perfbytes-layer5.svg"}},"fields":{"slug":"/blog/events/perfbytes-podcast"}}},"pageContext":{"slug":"/blog/events/perfbytes-podcast"}},"staticQueryHashes":["112401468","1485533831","3750885592","4047814605","679004096"],"slicesMap":{},"matchPath":"/blog/events/perfbytes-podcast"}